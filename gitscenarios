#!/bin/bash
#===============================================================================
#          FILE: gitscenarios
#         USAGE: gitscenarios 1
#   DESCRIPTION: Create different Git scenario's for Git
#       OPTIONS:
#  REQUIREMENTS:
#        AUTHOR: GÃ¡bor Nyers
#       CREATED: 2019-12-02
#      LICENCSE: GPLv3
#===============================================================================



ACTION=$1; shift

bailout () {
    echo $@; exit 1
}

gitbranch () {
    BRANCH=$(git rev-parse --abbrev-ref HEAD 2>&1) \
        && echo "$BRANCH"  || true
}

CURBR=$( gitbranch )

DEV1=${DEV1:-Anna}; EMAIL1='anna@acme.com'
DEV2=${DEV2:-Jack}; EMAIL2='jack@example.com'
CENTRAL='central'

# GIT COMMANDS
GITLOG='git --no-pager log --graph --decorate --oneline --all'

D=$( pwd )


SCEN11DESC="
  Scen 11: Prep fast-forward merge

    ======= Prep:
    Step 1. Create and checkout new branch **scen11**: git checkout -b scen11
    Step 2. Create 3 new commits in **scen11**       : gitgencommits 3
    Step 3. Checkout $CURBR                          : git checkout $CURBR

    ======= Execute:
    Step 4. Fast-forward merge branch 'scen11' into $CURBR: git merge scen11

"

SCEN12DESC="
  Scen 12: Prep 3-way merge - WITHOUT merge-conflict

    ======= Prep:
    Step 0. If no commit yet, create a single commit in master
    Step 1. Create new branch: 'git branch scen12'   : git branch scen12
    Step 2. Create 2 new commits in **master**       : gitgencommits 2
    Step 3. Checkout branch **scen12**               : git checkout scen12
    Step 4. Create 3 new commits in **scen12**       : gitgencommits 3
    STEP 5  Checkout **$CURBR**                      : git checkout $CURBR

    ======= Execute:
    Step 6. 3-way merge branch 'scen12' into $CURBR: git merge scen12

"

SCEN13DESC="
  Scen 13: Prep 3-way merge WITH merge-conflict

    ======= Prep:
    Step 0. If no commit yet, create a single commit in master
    Step 1.1 Create new file with some content, e.g. : 
               printf 'Line1\nLine2\nLine3\nLine 4\n' > README
    Step 1.2 Stage the file README for commit        : git add README
    Step 2. Create new branch: 'git branch scen13'   : git branch scen13
    Step 3. Create 2 new commits in **master**       : gitgencommits 2
    Step 4.1 While still in **$CURBR**, modify Line 2 of README, e.g. append 
               '.. modified content AFTER creating branch **scen13**'
    Step 4.2 Commit modified README to **$CURBR**    : git commit -am 'MSG..' README


    Step 4. Checkout branch **scen13**               : git checkout scen13
    Step 5.1 Modify Line 2 of the file README, e.g. append 
               ' .. added conflicting content in branch scen13'
    Step 5.2 Commit modified README to **scen13**    : git commit -am 'MSG..' README
    Step 6. Create 2 new commits in **scen13**       : gitgencommits 2

    STEP 7. Checkout **$CURBR**                      : git checkout $CURBR

    ======= Execute:
    Step 8. 3-way merge branch 'scen12' into $CURBR: git merge scen12
            Observe MERGE CONFLICT in file README

"

SCEN14DESC="
  Scen 14: Prep 3-way merge with edits to same file, yet WITHOUT merge-conflict

    ======= Prep:
    Step 1. create new file: MERGE_CONFLICT
    Step 2. create new branch: 'git branch scen14'
    Step 3. Still in master: modify line2 of MERGE_CONFLICT
    Step 4. check-out branch scen14
    Step 5. in scen14: edit the file in such a way that it will NOT cause merge-conflict
    Step 6. check-out branch master

    ======= Execute:
    Step 7. Execute 'git merge scen14' to observe that there are no merge conflicts

"

SCEN21DESC="
  Scen 21: Peer-to-peer collaboration: 2x individual repo's

    ======= Prep:
    Step 1. repo $DEV1 is created, with a single commit (README.DEV1)
    Step 2. local configuraion: username: $DEV1, email: $EMAIL1
    Step 3. repo $DEV2 is created, $DEV1's repo added as remote,
    Step 4. local configuraion: username: $DEV2, email: $EMAIL2
    Step 5. $DEV1's repo added as remote, and its content is fetched and
            merged.
    Step 4. $DEV2's repo is added as remote to $DEV2's repo
"

SCEN22DESC="
  Scen 22: Collaboration with a Central repository: 2x DEVs

    ======= Prep:
    Step 1. bare repo $CENTRAL is created
    Step 2. repo $DEV1 is created, with a local config:
            username: $DEV1, email: $EMAIL1
    Step 3. Create single commit
    Step 4. Add $CENTRAL as remote and push 'master' to $CENTRAL
    Step 5. repo $DEV2 is created, with a local config:
            username: $DEV2, email: $EMAIL2
    Step 4. Add $CENTRAL as remote and pull content
    Step 5. Checkout 'master' and create new file README.$DEV2 and commit
    Step 6. Push changes to master

"

SCEN33DESC="
  Scen 33: Prep a rebase with a 3-way merge that has merge-conflict
           (based on scen13)

    ======= Prep:
    Step 1. Run scen13
    Step 2. Rename branch scen13 to scen33: 'git branch rename scen13 scen33'
    Step 3. Still in master: modify line2 of MERGE_CONFLICT
    Step 4. check-out branch scen13
    Step 5. in scen13: create conflicting content in line2 of MERGE_CONFLICT
    Step 6. check-out branch master

    ======= Execute:
    Step 3. Execute 'git rebase scen13' to observer merge conflict

"
case $ACTION in
11)
    cat <<EOF
$SCEN11DESC
EOF
    gitgencommits 2
    CURBR=$( gitbranch )
    git checkout -b scen11
    gitgencommits 3
    git checkout $CURBR
    $GITLOG
    echo '-----------------------------------------------------------'
    echo 'Execute: git merge scen11'
    echo 'Observe fast-forward merge'
    echo '-----------------------------------------------------------'
    echo
    ;;
12)
    cat <<EOF
$SCEN12DESC
EOF
    if [ -z "$( $GITLOG )" ]
    then gitgencommits 1                     # Step 0
    fi
    CURBR=$( gitbranch )
    git branch scen12                        # Step 1
    gitgencommits 2                          # Step 2
    git checkout scen12                      # Step 3
    gitgencommits 3                          # Step 4
    git checkout $CURBR
    $GITLOG
    echo '-----------------------------------------------------------'
    echo 'Execute: git merge scen12'
    echo 'Observe: 3-way merge WITHOUT merge-conflict'
    echo '-----------------------------------------------------------'
    echo
    ;;
13)
    cat <<EOF
$SCEN13DESC
EOF
    if [ -z "$( $GITLOG )" ]
    then gitgencommits 1
    fi
    CURBR=$( gitbranch )
    echo '----- Creating file: README'
    printf 'Line 1\nLine 2\nLine 3\nLine 4\n' > README
    git add README
    git commit -m 'Added README with original content'
    git branch scen13
    gitgencommits 2
    sed -i '2s/^.*$/Line 2 .. modified content AFTER creating branch **scen13**/g' README
    git commit -am 'Modified README AFTER creating branch **scen13**'
    git checkout scen13
    echo "----- Creating conflicting content in scen13"
    sed -i '2s/^.*$/Line 2 .. added conflicting content in branch scen13/g' README
    git add README
    git commit -m 'Modified README with conflicting content in scen13'
    gitgencommits 2
    git checkout $CURBR
    $GITLOG
    echo '-----------------------------------------------------------'
    echo 'Execute: git merge scen13'
    echo '-----------------------------------------------------------'
    echo 'Observe that:'
    echo '- There is a merge-conflict in file README'
    echo '- git marked the conflicts with special markers:'
    echo '  "<<<<<<<<", "========" and ">>>>>>>>"'
    echo '-----------------------------------------------------------'
    echo
    ;;
14) cat <<EOF $SCEN13DESC
EOF
    if [ -z "$( $GITLOG )" ]
    then gitgencommits 1
    fi
    CURBR=$( gitbranch )
    echo '----- Creating file: MERGE_CONFLICT'
    printf 'Line1\nLine2\nLine3\nLine 4\n' > MERGE_CONFLICT
    git add MERGE_CONFLICT
    git commit -m 'Added MERGE_CONFLICT with original content'
    git branch scen14
    gitgencommits 2
    git checkout scen14
    gitgencommits 2
    echo "----- Creating conflicting content in scen14"
    sed -i "1s/^.*$/Line 1 -- now with different, yet not conflicting content in branch: scen14/g" MERGE_CONFLICT
    git add MERGE_CONFLICT
    git commit -m 'Modified MERGE_CONFLICT without merge conflict in scen14'
    gitgencommits 1
    git checkout $CURBR
    echo "----- Creating conflicting content in $CURBR"
    sed -i "4s/^.*$/Line 4 -- now with different, yet not conflicting content in $CURBR/g" MERGE_CONFLICT
    git add MERGE_CONFLICT
    git commit -m "Modified MERGE_CONFLICT without merge conflict in $CURBR"
    $GITLOG
    echo '-----------------------------------------------------------'
    echo 'Execute: git merge scen14'
    echo '-----------------------------------------------------------'
    echo 'Observe that:'
    echo '- There is no merge conflict'
    echo '-----------------------------------------------------------'
    echo
    ;;
21)
    [ -n "$CURBR" ] && bailout 'Current dir is already a Git. Exiting.'
    echo; echo "### --- Creating $DEV1's personal repo (dir: $(pwd)"
    cd "$D"
    git init $DEV1
    cd $DEV1
    git config --local user.name $DEV1
    git config --local user.email $EMAIL1
    git checkout -b master
    echo "This file is created by '$DEV1'" > "README.$DEV1"
    git add "README.$DEV1"
    git commit -m "Initial commit by $DEV1"

    echo; echo "### --- Creating $DEV2's personal repo, adding remote for $DEV1"
    cd "$D"
    # git clone $DEV1 $DEV2
    git init $DEV2
    cd $DEV2
    git config --local user.name $DEV2          #--- Config
    git config --local user.email $EMAIL2
    git remote add $DEV1 "$D/$DEV1"             #--- Remote
    git fetch $DEV1
    git merge $DEV1/master
    # git push --set-upstream $DEV1 master

    echo; echo "### --- Switching back to $DEV1, adding remote for $DEV2"
    cd $D/$DEV1
    git remote add $DEV2 "$D/$DEV2"
    git fetch $DEV2


    printf '\n\n===   SUMMARY     ===   ===   ===   ===   ===  \n'
    echo "DEV1: $DEV1, in $(realpath $DEV1) "
        cd $D/$DEV1
        (
        echo '--- Log:'; $GITLOG
        echo '--- Branches:'; git branch -a
        echo '--- Remotes:'; git remote -v
        ) | sed -e 's/^/    /g'

    printf '\n---   ---   ---   ---   ---   ---   ---   ---  \n'

    echo "DEV2: $DEV2, in $(realpath $DEV2) "
        cd $D/$DEV2
        (
        echo '--- Log:'; $GITLOG
        echo '--- Branches:'; git branch -a
        echo '--- Remotes:'; git remote -v
        ) | sed -e 's/^/    /g'
    printf '\n---   ---   ---   ---   ---   ---   ---   ---  \n'
    ;;
22)
    [ -n "$CURBR" ] && bailout 'Current dir is already a Git. Exiting.'
    echo; echo "### --- Creating central repository (dir: $(pwd)"
    git init --bare "$CENTRAL"

    echo; echo "### --- Creating $DEV1's personal repo (dir: $(pwd)"
    git init $DEV1
    cd $DEV1
    git config --local user.name $DEV1
    git config --local user.email $EMAIL1
    git checkout -b master
    echo "This file is created by '$DEV1'" > "README.$DEV1"
    git add "README.$DEV1"
    git commit -m "Initial commit by $DEV1"
    git remote add $CENTRAL "$D/$CENTRAL"
    git push --set-upstream central master
    cd "$D"

    echo; echo "### --- Creating $DEV2's personal repo (dir: $(pwd)"
    git init $DEV2
    cd $DEV2
    git config --local user.name $DEV2
    git config --local user.email $EMAIL2
    git remote add $CENTRAL "$D/$CENTRAL"
    git fetch $CENTRAL
    git merge $CENTRAL/master
    git checkout master
    echo "This file is created by '$DEV2'" > "README.$DEV2"
    git add "README.$DEV2"
    git commit -m "Initial commit by $DEV2"
    git push --set-upstream central master
    cd "$D"

    cd $DEV1
    git pull $CENTRAL
    echo '### --- SUMMARY:'
    echo "DEV1: $DEV1, in $(realpath $DEV1) "
    echo "DEV2: $DEV2, in $(realpath $DEV2) "
    echo "Central repo: $CENTRAL in $(realpath $CENTRAL)"
    ;;
33)
    if [ -z "$( $GITLOG )" ]
    then gitgencommits 1
    fi
    CURBR=$( gitbranch )
    echo '----- Rebasing demo (based on scen13)'
    $0 13
    echo '      Rename branch scen13 to scen33'
    git branch -m scen13 scen33
    $GITLOG
    echo '-----------------------------------------------------------'
    echo 'Execute: git rebase scen33'
    echo '-----------------------------------------------------------'
    echo 'Observe that:'
    echo '- Git will indicate a merge-conflict in file MERGE_CONFLICT'
    echo '- After manually resolving the conflict'
    echo '  - execute: git add MERGE_CONFLICT'
    echo '  - execute: git rebase --continue'
    echo '- Branch **scen34** is now "in-line" with **master**,'
    echo '  i.e.: fast-forward merge possible,'
    echo '-----------------------------------------------------------'
    echo
    ;;
34)
    if [ -z "$( $GITLOG )" ]
    then gitgencommits 1
    fi
    CURBR=$( gitbranch )
    echo '----- Rebasing demo (based on scen14)'
    $0 14
    echo '      Rename branch scen14 to scen34'
    git branch -m scen14 scen34
    $GITLOG
    echo '-----------------------------------------------------------'
    echo 'Execute: git rebase scen34'
    echo '-----------------------------------------------------------'
    echo 'Observe that:'
    echo '- There is no merge conflict'
    echo '- Branch **scen34** is now "in-line" with **master**,'
    echo '  i.e.: fast-forward merge possible,'
    echo '-----------------------------------------------------------'
    echo
    ;;
-d|--describe)
    DESC="SCEN${1}DESC"
    printf '%s' "${!DESC}"
    ;;
*)
    echo "Usage:"
    echo "     $( basename $0 ) [ -d | --describe ] 11 | 12 | 13 | 21 | 22"
    echo "  Where:"
    ;;
esac
